{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cate","type","value","placeholder","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","objeto","setObjeto","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAmB5C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,QAAU,IAC7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAe,MAMnB,SAEI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,YAAY,2BAClDC,SAnBkB,SAACR,GAAK,IACrBM,EAASN,EAAES,OAAXH,MACPR,EAAgBQ,S,+BCRTI,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEfC,EAFe,iDAEkCC,UAAUH,GAF5C,+DAGDI,MAAOF,GAHN,cAGfG,EAHe,gBAIAA,EAAKC,OAJL,uBAIdC,EAJc,EAIdA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EAEzB,MAAO,CAEHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZrB,kBAkBdM,GAlBc,4CAAH,sDCATO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAI/B,OACI,sBAAKc,UAAU,8CAAf,UACI,kCAAKJ,EAAL,OACA,qBAAKK,IAAMf,EAAMgB,IAAMN,QCLtBO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECCX,SAACA,GAAc,IAAD,EAEVf,mBAAS,CACjCsB,KAAO,GACPa,SAAU,IAJwB,mBAE/BC,EAF+B,KAEvBC,EAFuB,KA4BtC,OArBAC,qBAAW,WACPxB,EAAQC,GACHwB,MAAK,SAAAC,GAGFH,EAAU,CACNf,KAAOkB,EACPL,SAAU,SAIvB,CAACpB,IAUGqB,ED3BuBK,CAAa1B,GAA/Ba,EAFuB,EAE5BN,KAAYa,EAFgB,EAEhBA,QAUnB,OACI,qCACA,qBAAIJ,UAAU,2CAAd,cAA2DhB,EAA3D,OAEEoB,GAAW,mBAAGJ,UAAU,uCAAb,yBAHb,KAKA,qBAAKA,UAAU,eAAf,SAGQH,EAAOJ,KAAK,SAAEC,GACV,OAAO,cAAC,EAAD,eAEKA,GADGA,EAAIC,aEtB1BgB,EAAe,WAAM,MAGM1C,mBAAS,CAAC,UAHhB,mBAGvB2C,EAHuB,KAGX5C,EAHW,KAS9B,OACI,qCACA,mEACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ4C,EAAWnB,KAAM,SAACT,GAAD,OACb,cAAC,EAAD,CAEAA,SAAYA,GADLA,Y,MCjB3B6B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.bb9d13ec.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');  // => ('') > () => ('') != () => ( ) da una error, envia una variale undefined\r\n\r\n    const handleInputChange = (e) =>{//los valores que recibimos del input\r\n        const {value} = e.target;\r\n        setInputValue ( value );\r\n    };\r\n\r\n    const handleSubmit = (e) =>{//para enviar el input en un form\r\n        e.preventDefault();\r\n        \r\n        if ( inputValue.trim().length >= 3 ){\r\n            setCategories(cate => [inputValue,...cate]); // guardamos el nuevo valor del `inputValue`\r\n            setInputValue (''); // el estado del inputValue ahora es vacío\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit} > \r\n            {/* <h2> {inputValue} </h2> */}\r\n            <input type=\"text\" value={inputValue} placeholder='Ingresa una categoría'\r\n            onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n\r\n    setCategories : PropTypes.func.isRequired\r\n\r\n};\r\n","\r\n\r\n  export const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=9teA7HCnWuurc5f39vnHgrlEgM6IKYiH`;\r\n    const resp =  await fetch (url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img =>{\r\n\r\n        return {\r\n\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n            \r\n        }\r\n    })\r\n\r\n    // console.log(gifs);\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n\r\n    // console.log({title,url})\r\n\r\n    return (\r\n        <div className=\"imagenes animate__animated animate__flipInX\" >\r\n            <p> {title} </p>\r\n            <img src={ url } alt= {title} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => { // no te olvides de desestructurar la propiedad\r\n\r\n    const {data:images,loading} = useFetchGifs(category);  //data:images, en la desestructuracion cambiamos el nombre de la variable asi\r\n    \r\n    // useEffect(() =>{\r\n    //     //importamos la promesa getGifs de \"helpers\"\r\n    //     getGifs(category)\r\n    //         .then(setImages)\r\n    //         // .then( imgs => setImages(imgs)) // una funcion que manda el primer argumento al primer argumento de setImages\r\n    //         // se lo puede resumir como el de arriba\r\n    // },[category]); // que haga lo que hay dentro si cambia category\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__bounceInLeft \"> {category} </h3>\r\n        {/* {loading ? 'Cargando...' : 'Fin de la carga del objeto.'} */}\r\n         {loading && <p className=\"animate__animated animate__bounceIn \" >Cargando...</p>}  {/*el && es una condición lógica AND */}\r\n        \r\n        <div className=\"imagenesGrid\" >\r\n            \r\n            {\r\n                images.map( ( img ) =>{\r\n                    return <GifGridItem \r\n                            key = {img.id}\r\n                            {...img} \r\n                            />\r\n                }) \r\n            }\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\n//un custom hook\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [objeto, setObjeto] = useState({\r\n        data : [],\r\n        loading : true,    \r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                // console.log(imgs);\r\n                setObjeto({ \r\n                    data : imgs,\r\n                    loading : false\r\n                });\r\n\r\n            })\r\n    }, [category])\r\n\r\n    // a los 4  seg setea Objeto con este \"objeto\" (valga la redundancia)\r\n    // setTimeout(() => {\r\n    //     setObjeto({\r\n    //         data : [1,2,3,4,5,6,10],\r\n    //         loading : false,    \r\n    //     });\r\n    // }, 4000);\r\n\r\n    return objeto; // {data = [], loading = true}\r\n\r\n};\r\n","import React , {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['DMC','Resident Evil','Wow'];\r\n    const [categories, setCategories] = useState(['Gamer']);\r\n\r\n    // const handleAdd = () =>{\r\n    //     setCategories([...categories,'Lol']);\r\n    //     // setCategories( cate => [...cate,'Lol']);\r\n    // };\r\n    return (\r\n        <>\r\n        <h2>GifExpertApp (buscador de gif's) </h2>\r\n        <AddCategory setCategories= {setCategories} />\r\n        <hr />\r\n\r\n        <ol>\r\n            {//las llaves marcan una expresion en javascrip\r\n                categories.map ( (category) =>( \r\n                    <GifGrid  \r\n                    key = {category}\r\n                    category = {category} \r\n                    /> \r\n                ))  \r\n                // lo que encuentra lo guarda en category //la funcion map busca todas las categorias y su indice\r\n                \r\n            }\r\n        </ol>\r\n\r\n        </>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n//rafc","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}